% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/walk.forward.R
\name{walk.forward}
\alias{walk.forward}
\title{Rolling Walk Forward Analysis}
\usage{
walk.forward(
  strategy.st,
  paramset.label,
  portfolio.st,
  account.st,
  period,
  k.training,
  nsamples = 0,
  audit.prefix = NULL,
  k.testing,
  obj.func = function(x) {     which(x == max(x)) },
  obj.args = list(x = quote(tradeStats.list$Net.Trading.PL)),
  anchored = FALSE,
  include.insamples = TRUE,
  ...,
  verbose = FALSE,
  savewf = FALSE,
  saveenv = FALSE,
  psgc = TRUE
)
}
\arguments{
\item{strategy.st}{the name of the strategy object}

\item{paramset.label}{a label uniquely identifying within the strategy the paramset to be tested}

\item{portfolio.st}{the name of the portfolio object}

\item{account.st}{the name of the account object}

\item{period}{the period unit, as a character string, eg. 'days' or 'months'}

\item{k.training}{the number of periods to use for training, eg. '3' months}

\item{nsamples}{the number of sample param.combos to draw from the paramset for training; 0 means all samples (see also apply.paramset)}

\item{audit.prefix}{default NULL.  if not NULL, \code{walk.forward} will store the audit environment from each training period, containing an enviroment called .audit, with all in-sample portfolios and orderbooks as well as information as to which param.combos were evaluated, and the result of the objective function. In addition, a special file is generated that contains portfolio and orderbook for the concatenated testing param.combos as selected by the objective function, plus (optionally) complete in-sample portfolios and orderbooks for reference (see include.insamples)}

\item{k.testing}{the number of periods to use for testing, eg. '1 month'}

\item{obj.func}{a user provided function returning the best param.combo from the paramset, based on training results; defaults to 'max'}

\item{obj.args}{a user provided argument to obj.func, defaults to quote(tradeStats.list$Net.Trading.PL)}

\item{anchored}{whether to use a fixed start for the training window (TRUE), or a sliding start (FALSE); defaults to FALSE}

\item{include.insamples}{will optionally run a full backtest for each param.combo in the paramset, and add the resulting in-sample portfolios and orderbooks to the audit environment; default TRUE}

\item{...}{optional parameters to pass to apply.paramset()}

\item{verbose}{dumps a lot of info during the run if set to TRUE, defaults to FALSE}

\item{savewf}{boolean, default FALSE. if TRUE, saves audit information on training and testing periods to working directory for later analysis}

\item{saveenv}{boolean, default FALSE. if TRUE, save the paramset environment information for each trial, and not just the tradeStats and chosen paramset}

\item{psgc}{boolean, if TRUE, the default, run gc() in each worker session to conserve RAM.}
}
\value{
a list consisting of a slot containing detailed results for each training + testing period, as well as the portfolio and the tradeStats() for the portfolio
}
\description{
A wrapper for \code{\link{apply.paramset}} and \code{\link{applyStrategy}},
implementing a Rolling Walk Forward Analysis (WFA).
}
\details{
walk.forward executes a strategy on a portfolio, while rolling a
re-optimization of one of the strategies parameter sets during a specified
time period (training window), then selecting an optimal parameter
combination from the parameter set using an obj function, then applying the
selected parameter combo to the next out-of-sample time period immediately
following the training window (testing window). Once completed, the training
window is shifted forward by a time period equal to the testing window size,
and the process is repeated. The final testing window may be shorter than the
full testing window, if the length of the time series does not allow a full 
testing window.

'anchored' walk forward forces all training windows to start on the first
observation of the market data.  This can be useful if the indicators make
use of all the data, e.g. for a risk metric such as a volatility estimator,
for a regime model, or for a long-memory process of some sort.  If
\code{anchored=TRUE} and you have specified \code{k.training}, then the
performance of each paramset will only be evaluated on the rolling training 
window, even though larger (anchored) periods are used for input calculations.  

Note that walk.forward will generate out of sample (OOS) transactions using
the chosen parameter set into the portfolio designated by portfolio.st. So
walk.forward shoud be supplied with a 'clean' portfolio environment to avoid 
issues such as out of order transactions. 

The \code{psgc} argument is a tradeoff between memory efficiency and speed.
\R does garbage collection promarily when it is running low on RAM, but this 
automatic detection works poorly in parallel processes.  If TRUE, the default,
\code{walk.proward} and \code{\link{apply.paramset}} will call \code{gc()}
at key points to limit RAM usage.  For small tests, this is probably 
unecessary and will only slow the test.  For large tests, even on substantial
hardware, it may be the difference between completing the test and crashing \R.
}
\references{
Tomasini, E. and Jaekle, U. Trading Systems. 2009. Chapter 6
}
\seealso{
\code{\link{applyStrategy}} ,
    \code{\link{apply.paramset}} ,
    \code{\link{chart.forward}} ,
    \code{\link{chart.forward.training}} ,  
    \code{\link{endpoints}} ,
    \code{\link[blotter]{tradeStats}}
}
\author{
Jan Humme, Brian G. Peterson
}
