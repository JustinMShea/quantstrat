% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Federov.design.R
\name{Federov.paramset}
\alias{Federov.paramset}
\title{construct a full Federov design or a constrained Monte Carlo Federov design for a strategy parameter set}
\usage{
Federov.paramset(
  strategy.st,
  paramset.label,
  ...,
  method = "Federov",
  printd = FALSE,
  returnlist = FALSE,
  approximate = TRUE,
  center = TRUE,
  constrain = FALSE
)
}
\arguments{
\item{strategy.st}{astring describing the name of an object of type `strategy` that contains a parameter set to construct a Federov design for}

\item{paramset.label}{label describing the paramset to use in the strategy object}

\item{...}{any other passthrough parameters}

\item{method}{one of "Federov" or "MonteCarlo", see Details}

\item{printd}{if TRUE, print the design summary}

\item{returnlist}{if TRUE, return the list object describing the Federov design, else return just the `param.combos`}

\item{approximate}{if FALSE, use an exact design, will be slower but more accurate than if TRUE}

\item{center}{if TRUE, the default, center the parameters around a center value, see Details}

\item{constrain}{if TRUE, `apply.constraints` for the full Federov design, see Details}
}
\value{

}
\description{
This function provides a wrapper for constructing Federov designs for
parameters by using the parameter set logic of quantstrat and the experiment
design functions from the `AlgDesign` package.  It will construct a full or
approximate Federov design via `method="Federov"` (not case sensitive) using
the `optFederov` function and will construct a constrained Monte Carlo
Federov design via `method="MonteCarlo"` using the `optMonteCarlo` function.
}
\details{
It is important to note from the beginning that while `method="Federov"` is
the default, that the closed form Federov design is not suitable when there
are constraints.  We will warn the user if there are constraints in the 
strategy specification and a full Federov design is chosen.  The function
also supports the option `constrain=TRUE` that will apply constraints to 
the full Federov design.  For some strategies with many constraints, this 
may result in a significantly unbalanced set.  This should still be OK as a 
starting point for optimization, but may hamper some statistical inference
about parameter interactions and lower the overall power of the design if
the unbalanced nature is severe.
 
For now, for constrained Monte Carlo Federov designs, we are not supporting 
factor or mixture models, though these designs are supported by the `AlgDesign`
package.  Patches welcome, or even just discussion of solid use cases.
 
The user may use \dots to pass through any additional parameters for use by 
`optFederov` or `optMonteCarlo`. For example, `nLevels`, `nCand`, `nRepeats`
may be candidates for finer grained control.  see `?AlgDesign::optMonteCarlo`
for details.  We have tried to make reasonable decisions based on the data
contained in the strategy object. `nLevels` defaults to the minimum of 5 
(though 3 is a reasonable and smaller choice) or the number of levels 
contained in the paramset for that variable.
}
\seealso{
optFederov
}
